name: CI

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - feature/*

env:
    REGISTRY: ghcr.io

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Получаем список директорий в ./cmd/
      - name: Get application list
        id: get_applications
        run: |
          # Проверяем существование папки ./cmd/
          if [ ! -d "./cmd" ]; then
            echo "Error: Directory ./cmd does not exist."
            exit 1
          fi

          # Используем find для получения только директорий в ./cmd/, преобразуем результат в строку через пробелы
          dirs=$(find ./cmd -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)

          # Проверяем, что список не пустой
          if [ -z "$dirs" ]; then
            echo "Error: No directories found in ./cmd/"
            exit 1
          fi

          # Удаляем символы возврата каретки (\r) и преобразуем в строку через пробелы
          dirs=$(echo "$dirs" | tr '\r' ' ' | tr '\n' ' ')

          # Убираем лишние пробелы в конце строки
          dirs=$(echo "$dirs" | sed 's/[[:space:]]*$//')

          # Записываем результат в переменную окружения
          echo "dirs=$dirs" >> $GITHUB_OUTPUT

      # Проверяем, что список директорий не пустой
      - name: Check if applications exist
        if: steps.get_applications.outputs.dirs == ''
        run: |
          echo "No applications found in ./cmd/"
          exit 1

      # Создаем метаданные для каждого приложения
      - name: Process metadata for each application
        if: steps.get_applications.outputs.dirs != ''
        run: |
          IFS=' ' read -r -a dirs <<< "${{ steps.get_applications.outputs.dirs }}"
          for dir in "${dirs[@]}"; do
            echo "Processing metadata for application: $dir"
            # Добавляем step для каждого приложения динамически
            echo "- name: Metadata for $dir" >> $GITHUB_WORKFLOW
            echo "  uses: docker/metadata-action@v5" >> $GITHUB_WORKFLOW
            echo "  id: meta-$dir" >> $GITHUB_WORKFLOW
            echo "  with:" >> $GITHUB_WORKFLOW
            echo "    images: ghcr.io/${{ github.repository_owner }}/$dir" >> $GITHUB_WORKFLOW
            echo "    tags: latest,${{ github.sha }},v${{ github.ref_name }}" >> $GITHUB_WORKFLOW
          done

      - name: Login to Docker Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.CI_TOKEN }}

      # Создаем и пушим image для каждого приложения
      - name: Process create docker image for each application
        if: steps.get_applications.outputs.dirs != ''
        run: |
          # Разбиваем список директорий на массив
          IFS=' ' read -r -a dirs <<< "${{ steps.get_applications.outputs.dirs }}"
          for dir in "${dirs[@]}"; do
            # Вызываем docker/build-push-action для каждого приложения
            echo "Processing image build for application: $dir"
            build-push-action@v6 \
              -- context: . \
              -- file: deployments/Dockerfile \
              -- push: ${{ github.event_name != 'pull_request' }} \
              -- tags: ${{ steps.meta-api.outputs.tags }} \
              -- labels: ${{ steps.meta-api.outputs.labels }} \
              -- build-args: APPLICATION_NAME=$dir
          done