name: CI

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - feature/*

env:
  REGISTRY: ghcr.io

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Получаем список директорий в ./cmd/
      - name: Get application list
        id: get_applications
        run: |
          if [ ! -d "./cmd" ]; then
            echo "Error: Directory ./cmd does not exist."
            exit 1
          fi
          dirs=$(find ./cmd -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
          if [ -z "$dirs" ]; then
            echo "Error: No directories found in ./cmd/"
            exit 1
          fi
          echo "dirs=$dirs" >> $GITHUB_OUTPUT

      # Логин в Docker Registry (выполняется только для событий, кроме pull_request)
      - name: Login to Docker Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CI_TOKEN }}

      # Строим и пушим образы для каждого приложения
      - name: Build & Push for each application
        if: steps.get_applications.outputs.dirs != ''
        run: |
          IFS=' ' read -r -a dirs <<< "${{ steps.get_applications.outputs.dirs }}"
          for dir in "${dirs[@]}"; do
            echo "Processing application: $dir"

            # Определение шага для каждого приложения
            echo "::add-job::Build & Push $dir"
            echo "uses: docker/build-push-action@v6"
            echo "with:"
            echo "  context: ./cmd/$dir"
            echo "  file: ./cmd/$dir/Dockerfile"
            echo "  push: ${{ github.event_name != 'pull_request' }}"
            echo "  tags: |
                    ${{ env.REGISTRY }}/${{ github.repository_owner }}/$dir:latest
                    ${{ env.REGISTRY }}/${{ github.repository_owner }}/$dir:${{ github.sha }}
                    ${{ env.REGISTRY }}/${{ github.repository_owner }}/$dir:v${{ github.ref_name }}"
            echo "  labels: org.opencontainers.image.source=${{ github.repository }}"
            echo "  build-args: APPLICATION_NAME=$dir"
          done