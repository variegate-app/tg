name: CI

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - feature/*

env:
    REGISTRY: ghcr.io

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Получаем список директорий в ./cmd/
      - name: Get application list
        id: get_applications
        run: |
          # Проверяем существование папки ./cmd/
          if [ ! -d "./cmd" ]; then
            echo "Error: Directory ./cmd does not exist."
            exit 1
          fi

          # Используем find для получения только директорий в ./cmd/, преобразуем результат в строку через пробелы
          dirs=$(find ./cmd -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)

          # Проверяем, что список не пустой
          if [ -z "$dirs" ]; then
            echo "Error: No directories found in ./cmd/"
            exit 1
          fi

          # Удаляем символы возврата каретки (\r) и преобразуем в строку через пробелы
          dirs=$(echo "$dirs" | tr '\r' ' ' | tr '\n' ' ')

          # Убираем лишние пробелы в конце строки
          dirs=$(echo "$dirs" | sed 's/[[:space:]]*$//')

          # Записываем результат в переменную окружения
          echo "dirs=$dirs" >> $GITHUB_OUTPUT

      # Проверяем, что список директорий не пустой
      - name: Check if applications exist
        if: steps.get_applications.outputs.dirs == ''
        run: |
          echo "No applications found in ./cmd/"
          exit 1

      # Логин в Docker Registry (выполняется только для событий, кроме pull_request)
      - name: Login to Docker Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CI_TOKEN }}

      # Создаем метаданные и строим образы для каждого приложения
      - name: Build & Push for each application
        if: steps.get_applications.outputs.dirs != ''
        run: |
          IFS=' ' read -r -a dirs <<< "${{ steps.get_applications.outputs.dirs }}"
          for dir in "${dirs[@]}"; do
            echo "Processing application: $dir"
            echo "Adding build and push step for application: $dir"
            echo "- name: Build and push $dir" >> $GITHUB_WORKFLOW
            echo "  uses: docker/build-push-action@v6" >> $GITHUB_WORKFLOW
            echo "  with:" >> $GITHUB_WORKFLOW
            echo "    context: ." >> $GITHUB_WORKFLOW
            echo "    file: deployments/Dockerfile" >> $GITHUB_WORKFLOW
            echo "    push: ${{ github.event_name != 'pull_request' }}" >> $GITHUB_WORKFLOW
            echo "    tags: |
                        ${{ env.REGISTRY }}/${{ github.repository_owner }}/$dir:latest
                        ${{ env.REGISTRY }}/${{ github.repository_owner }}/$dir:${{ github.sha }}
                        ${{ env.REGISTRY }}/${{ github.repository_owner }}/$dir:v${{ github.ref_name }}" >> $GITHUB_WORKFLOW
            echo "    labels: org.opencontainers.image.source=${{ github.repository }}" >> $GITHUB_WORKFLOW
            echo "    build-args: APPLICATION_NAME=$dir" >> $GITHUB_WORKFLOW

          done